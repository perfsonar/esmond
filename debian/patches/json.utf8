This patch should be remove when the Debian/Ubuntu systems are using Python 3.6 or higher.
See https://docs.python.org/3/whatsnew/3.6.html#json
--- a/esmond/api/client/perfsonar/query.py	2022-04-04 12:18:10.527143716 -0400
+++ b/esmond/api/client/perfsonar/query.py	2022-04-04 12:18:12.365627192 -0400
@@ -165,7 +165,7 @@
 
             if r.status_code == 200 and \
                     r.headers['content-type'] == 'application/json':
-                data = json.loads(r.text)
+                data = json.loads(r.text.decode('utf-8'))
 
                 data_payload += data
 
@@ -815,7 +815,7 @@
 
         if r.status_code == 200 and \
                 r.headers['content-type'] == 'application/json':
-            data = json.loads(r.text)
+            data = json.loads(r.text.decode('utf-8'))
 
             if data:
                 m_total = Metadata(data[0], self.api_url, self.filters).metadata_count_total
@@ -853,7 +853,7 @@
                         raise StopIteration()
                         yield  # pylint: disable=unreachable
 
-                    tmp = json.loads(r.text)
+                    tmp = json.loads(r.text.decode('utf-8'))
 
                     if self.filters.verbose:
                         print('got {0} results\n'.format(len(tmp)))
--- a/esmond/api/perfsonar/api_v2.py	2022-04-04 12:18:10.532356218 -0400
+++ b/esmond/api/perfsonar/api_v2.py	2022-04-04 12:18:12.366619296 -0400
@@ -928,7 +928,7 @@
             raise ParseError(detail='No data payload POSTed.')
 
         try:
-            request_data = json.loads(request.body)
+            request_data = json.loads(request.body.decode('utf-8'))
         except ValueError:
             raise ParseError(detail='POST data payload could not be decoded to a JSON object - given: {0}'.format(request.body))
         
@@ -1049,7 +1049,7 @@
             raise ParseError(detail='No data payload POSTed.')
 
         try:
-            request_data = json.loads(request.body)
+            request_data = json.loads(request.body.decode('utf-8'))
         except ValueError:
             raise ParseError(detail='POST data payload could not be decoded to a JSON object - given: {0}'.format(request.body))
 
@@ -1177,7 +1177,7 @@
             raise ParseError(detail='No data payload POSTed.')
 
         try:
-            request_data = json.loads(request.body)
+            request_data = json.loads(request.body.decode('utf-8'))
         except ValueError:
             raise ParseError(detail='POST data payload could not be decoded to a JSON object - given: {0}'.format(request.body))
         
--- a/esmond/api/tests/perfsonar/test_api.py	2022-04-04 12:18:10.533791827 -0400
+++ b/esmond/api/tests/perfsonar/test_api.py	2022-04-04 12:18:12.367520300 -0400
@@ -56,7 +56,7 @@
     def assertExpectedResponse(self, expected, url, get_params={}):
         response = self.client.get(url, get_params)
         self.assertHttpOK(response)
-        data = json.loads(response.content)
+        data = json.loads(response.content.decode('utf-8'))
 
         # Trigger object inspection if we have a mismatch. This is to 
         # assist in debugging
@@ -274,7 +274,7 @@
     def assertMetadataCount(self, count, url, get_params={}):
         response = self.client.get(url, get_params)
         self.assertHttpOK(response)
-        data = json.loads(response.content)
+        data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(data), count)
         
     def test_get_metadata_list(self):
@@ -295,7 +295,7 @@
         #test query using IPv4 address
         response = self.client.get(url, {'source': self.v4_ip})
         self.assertHttpOK(response)
-        ipv4_data = json.loads(response.content)
+        ipv4_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(ipv4_data), 4)
         
         #test query using DNS name with only A record
@@ -320,7 +320,7 @@
         #test query using IPv6 address
         response = self.client.get(url, {'source': self.v6_ip})
         self.assertHttpOK(response)
-        ipv6_data = json.loads(response.content)
+        ipv6_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(ipv6_data), 2)
         
         #test query using DNS name with only AAAA record
@@ -345,11 +345,11 @@
         #test query using DNS name on name with both A and AAAA records
         response = self.client.get(url, {'source': self.v4v6_ipv4})
         self.assertHttpOK(response)
-        ipv4_data = json.loads(response.content)
+        ipv4_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(ipv4_data), 1)
         response = self.client.get(url, {'source': self.v4v6_ipv6})
         self.assertHttpOK(response)
-        ipv6_data = json.loads(response.content)
+        ipv6_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(ipv6_data), 1)
                
         #test query using DNS name that only does v4 lookups on name both A and AAAA records
@@ -413,21 +413,21 @@
         url = '/{0}/archive/e99bbc44b7b041c7ad9e51dc6a053b8c/'.format(PS_ROOT)
         response = self.client.get(url)
         self.assertHttpOK(response)
-        data = json.loads(response.content)
+        data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(self.md_detail, data)
     
     def test_get_event_type_detail(self):
         url = '/{0}/archive/e99bbc44b7b041c7ad9e51dc6a053b8c/throughput/'.format(PS_ROOT)
         response = self.client.get(url)
         self.assertHttpOK(response)
-        self.assertEquals(self.et_detail, json.loads(response.content))
+        self.assertEquals(self.et_detail, json.loads(response.content.decode('utf-8')))
 
     
     def test_get_summary_detail(self):
         url = '/{0}/archive/e99bbc44b7b041c7ad9e51dc6a053b8c/throughput/averages/'.format(PS_ROOT)
         response = self.client.get(url)
         self.assertHttpOK(response)
-        self.assertEquals(self.summ_detail, json.loads(response.content))
+        self.assertEquals(self.summ_detail, json.loads(response.content.decode('utf-8')))
     
     
     def test_post_metadata_list(self):
@@ -442,7 +442,7 @@
         #test with credentials with permissions
         response = self.get_api_client(admin_auth=True).post(url, format='json', data=self.post_data)
         self.assertHttpCreated(response)
-        data = json.loads(response.content)
+        data = json.loads(response.content.decode('utf-8'))
         #verify the server generated he uri and metadata keys
         self.assertIsNotNone(data['uri'])
         self.assertIsNotNone(data['metadata-key'])
@@ -459,7 +459,7 @@
         existing_mdkey = data['metadata-key']
         response = self.get_api_client(admin_auth=True).post(url, format='json', data=self.post_data)
         self.assertHttpCreated(response)
-        new_data = json.loads(response.content)
+        new_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(new_data['uri'], existing_uri )
         self.assertEquals(new_data['metadata-key'], existing_mdkey )
         
@@ -598,7 +598,7 @@
         self.assertHttpCreated(response)
         response = self.client.get(url, {'time': ts})
         self.assertHttpOK(response)
-        response_data = json.loads(response.content)
+        response_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(response_data), 1)
         if(test_equals):
             self.assertEquals(post_data, response_data[0])
@@ -623,7 +623,7 @@
         self.assertHttpCreated(response)
         response = self.client.get(base_url, {'time-start': start, 'time-end': end})
         self.assertHttpOK(response)
-        response_data = json.loads(response.content)
+        response_data = json.loads(response.content.decode('utf-8'))
         self.assertEquals(len(response_data), len(data))
     
     def assertAuthFailure(self, url, ts, val, cred):
